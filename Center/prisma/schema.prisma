generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 网关列表模型
model gatewayList {
  id        String           @id @db.VarChar(128)
  name      String?          @db.VarChar(255)
  host      String           @db.VarChar(255)
  port      Int
  status    Int              @default(0)
  switch    Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  scanners  scannerList[]
  parsers   parserList[]
  ndsLinks  GatewayNDSLink[]

  @@map("gateway_list")
}

// NDS列表模型
model ndsList {
  id           Int              @id @default(autoincrement())
  Name         String           @db.VarChar(150)
  Address      String           @db.VarChar(100)
  Port         Int              @default(2121)
  Protocol     String           @default("SFTP") @db.VarChar(20)
  Account      String           @db.VarChar(100)
  Password     String           @db.VarChar(100)
  PoolSize     Int              @default(5)
  MRO_Path     String           @default("/MR/MRO/") @db.VarChar(250)
  MRO_Filter   String           @default("^/MR/MRO/[^/]+/[^/]+_MRO_[^/]+.zip$") @db.VarChar(250)
  MDT_Path     String           @default("/MDT/") @db.VarChar(250)
  MDT_Filter   String           @default("^/MDT/[^/]+/CSV/LOG-MDT/.*_LOG-MDT_.*.zip$") @db.VarChar(250)
  Switch       Int              @default(1)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  gatewayLinks GatewayNDSLink[]
  scannerLinks ScannerNDSLink[]

  @@map("nds_list")
}

// Gateway和NDS的关联表
model GatewayNDSLink {
  id        Int         @id @default(autoincrement())
  gatewayId String      @db.VarChar(128) // 网关ID
  ndsId     Int         @db.Int // NDS ID
  createdAt DateTime    @default(now())
  gateway   gatewayList @relation(fields: [gatewayId], references: [id])
  nds       ndsList     @relation(fields: [ndsId], references: [id])

  @@unique([gatewayId, ndsId])
  @@map("gateway_nds_link")
}

// Scanner列表模型
model scannerList {
  id        String           @id @db.VarChar(128)
  gatewayId String?          @db.VarChar(128)
  name      String?          @db.VarChar(255)
  host      String           @db.VarChar(255)
  port      Int              @default(10002)
  status    Int              @default(0)
  switch    Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  gateway   gatewayList?     @relation(fields: [gatewayId], references: [id])
  ndsLinks  ScannerNDSLink[]

  @@map("scanner_list")
}

// Scanner和NDS的关联表
model ScannerNDSLink {
  id        Int         @id @default(autoincrement())
  scannerId String      @db.VarChar(128) // Scanner ID
  ndsId     Int         @db.Int // NDS ID
  createdAt DateTime    @default(now())
  scanner   scannerList @relation(fields: [scannerId], references: [id])
  nds       ndsList     @relation(fields: [ndsId], references: [id])

  @@unique([scannerId, ndsId])
  @@map("scanner_nds_link")
}

// Parser列表模型
model parserList {
  id        String       @id @db.VarChar(128)
  gatewayId String?      @db.VarChar(128)
  name      String?      @db.VarChar(255)
  host      String       @db.VarChar(255)
  port      Int          @default(10002)
  status    Int          @default(0)
  switch    Int          @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  gateway   gatewayList? @relation(fields: [gatewayId], references: [id], onDelete: SetNull)

  @@map("parser_list")
}

// ndsFile列表模型
model ndsFileList {
  file_hash     String   @db.VarChar(128)
  ndsId         Int      @db.Int
  file_path     String   @db.VarChar(250)
  file_time     DateTime @db.DateTime
  data_type     String   @db.VarChar(64)
  sub_file_name String   @db.VarChar(255)
  header_offset Int      @default(0)
  compress_size Int      @default(0)
  file_size     Int      @default(0)
  flag_bits     Int      @default(0)
  enodebid      String   @db.VarChar(16)
  parsed        Int      @default(0) // -2解析错误 -1文件不存在 0未处理 1在任务队列 2已处理
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@id([file_hash, file_time])
  @@index([file_hash])
  @@index([file_time])
  @@index([data_type])
  @@index([enodebid])
  @@index([parsed])
  @@index([ndsId, data_type, file_time, enodebid, parsed], name: "idx_nds_file_composite")
  @@map("nds_file_list")
}

// task列表模型
model taskList {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100) // 任务名称
  data_type String   @db.VarChar(20) // 任务类型 MRO/MDT
  start_time DateTime // 任务开始时间
  end_time  DateTime // 任务结束时间
  status    Int      @default(0) // 状态 0未处理 1处理完成
  remark    String?  @db.VarChar(500) // 任务备注，长文本类型，最大500字节
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([id])
  @@map("task_list")
}

// enb_task列表模型
model enbTaskList {
  id          Int      @id @default(autoincrement())
  taskId      Int      @db.Int
  enodebid    String   @db.VarChar(16)
  data_type   String   @db.VarChar(64)
  start_time  DateTime @db.DateTime
  end_time    DateTime @db.DateTime
  parsed      Int      @default(0) // 解析状态 0未完成 1已完成
  status      Int      @default(0) // 状态 0未处理 1完成
  trigger_check Int      @default(0) // 是否需要触发检查，0需要，1不需要
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([taskId])
  @@index([enodebid])
  @@index([parsed])
  @@index([status])
  @@index([trigger_check])
  @@index([enodebid, data_type, parsed, status], name: "idx_enb_task_composite")
  @@map("enb_task_list")
}

// cell_data列表模型

model cellData {
  CGI         String   @id @db.VarChar(64) // 小区CGI, 唯一
  eNodeBID    Int      @db.Int // 基站ID
  PCI         Int      @db.Int // 物理小区标识
  Azimuth     Int?     @db.Int // 方位角
  Earfcn      Int      @db.Int // 频点编号
  Freq        Float    @db.Double // 频率
  eNBName     String?  @db.VarChar(200) // 基站名称
  userLabel   String?  @db.VarChar(200) // 用户标签
  Longitude   Float    @db.Double // 经度
  Latitude    Float  @db.Double // 纬度
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([CGI])
  @@index([eNodeBID])
  @@map("cell_data")
}
